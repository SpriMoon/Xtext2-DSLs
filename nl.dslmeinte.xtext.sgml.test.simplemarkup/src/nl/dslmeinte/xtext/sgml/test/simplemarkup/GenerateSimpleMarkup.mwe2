module nl.dslmeinte.xtext.sgml.test.simplemarkup.GenerateSimpleMarkup

import org.eclipse.emf.mwe.utils.*
import org.eclipse.xtext.generator.*
import org.eclipse.xtext.ui.generator.*

var grammarURI = "classpath:/nl/dslmeinte/xtext/sgml/test/simplemarkup/SimpleMarkup.xtext"
var file.extensions = "sm"
var projectName = "nl.dslmeinte.xtext.sgml.test.simplemarkup"
var runtimeProject = "../${projectName}"

Workflow {
    bean = StandaloneSetup {
        scanClassPath = true
        platformUri = "${runtimeProject}/.."
//        registerGenModelFile="classpath:/nl/dslmeinte/xtext/sgml/base/Base.genmodel"
		registerGenModelFile="platform:/resource/nl.dslmeinte.xtext.sgml.base/src-gen/nl/dslmeinte/xtext/sgml/base/Base.genmodel"
    }

    component = DirectoryCleaner {
        directory = "${runtimeProject}/src-gen/nl"	// do not wipe out .gitignore so src-gen remains in repository
    }

    component = DirectoryCleaner {
        directory = "${runtimeProject}.ui/src-gen"
    }

    component = Generator {
        pathRtProject = runtimeProject
        pathUiProject = "${runtimeProject}.ui"
        pathTestProject = "${runtimeProject}.tests"
        projectNameRt = projectName
        projectNameUi = "${projectName}.ui"
        language = {
            uri = grammarURI
            fileExtensions = file.extensions

            fragment = grammarAccess.GrammarAccessFragment {}
            fragment = ecore.EcoreGeneratorFragment {}
            fragment = serializer.SerializerFragment {}
            fragment = resourceFactory.ResourceFactoryFragment { fileExtensions = file.extensions }
			fragment = parser.antlr.ex.rt.AntlrGeneratorFragment {
				options = {
					ignoreCase=true
					classSplitting=true
					backtrack=true
					memoize=true
				}
			}
			fragment = validation.JavaValidatorFragment {
				composedCheck = "org.eclipse.xtext.validation.ImportUriValidator"
				composedCheck = "org.eclipse.xtext.validation.NamesAreUniqueValidator"
			}

			fragment = scoping.ImportNamespacesScopingFragment { ignoreCase=true }
			// overridden by binding in runtime module:
			fragment = exporting.SimpleNamesFragment {}

            fragment = builder.BuilderIntegrationFragment {}
            fragment = formatting.FormatterFragment {}
            fragment = labeling.LabelProviderFragment {}
            fragment = outline.OutlineTreeProviderFragment {}
            fragment = outline.QuickOutlineFragment {}
            fragment = quickfix.QuickfixProviderFragment {}
            fragment = contentAssist.JavaBasedContentAssistFragment {}
			fragment = parser.antlr.ex.ca.ContentAssistParserGeneratorFragment {
				options = {
					ignoreCase=true
					classSplitting=true
					backtrack=true
					memoize=true
				}
			}
            fragment = templates.CodetemplatesGeneratorFragment {}
            fragment = refactoring.RefactorElementNameFragment {}
            fragment = compare.CompareFragment {
                 fileExtensions = file.extensions
            }

        }
    }
}
