module nl.dslmeinte.xtext.sgml.base.GenerateBase

import org.eclipse.emf.mwe.utils.*
import org.eclipse.xtext.generator.*
import org.eclipse.xtext.ui.generator.*

var grammarURI = "classpath:/nl/dslmeinte/xtext/sgml/base/Base.xtext"
var projectName = "nl.dslmeinte.xtext.sgml.base"
var runtimeProject = "../${projectName}"

Workflow {
    bean = StandaloneSetup {
        scanClassPath = true
        platformUri = "${runtimeProject}/.."
    }

    component = DirectoryCleaner {
        directory = "${runtimeProject}/src-gen/nl"	// do not wipe out .gitignore so src-gen remains in repository
    }

    component = DirectoryCleaner {
        directory = "${runtimeProject}.ui/src-gen"
    }

    component = Generator {
        pathRtProject = runtimeProject
        pathUiProject = "${runtimeProject}.ui"
        pathTestProject = "${runtimeProject}.tests"
        projectNameRt = projectName
        projectNameUi = "${projectName}.ui"
        language = {
            uri = grammarURI
            fileExtensions = "$"	// bogus extension (never matched?)

            fragment = grammarAccess.GrammarAccessFragment {}
            fragment = ecore.EcoreGeneratorFragment {}
            fragment = serializer.SerializerFragment {}

            fragment = parser.antlr.XtextAntlrGeneratorFragment {}
            fragment = validation.JavaValidatorFragment {
                composedCheck = "org.eclipse.xtext.validation.ImportUriValidator"
                composedCheck = "org.eclipse.xtext.validation.NamesAreUniqueValidator"
            }
            fragment = scoping.ImportNamespacesScopingFragment {}
            fragment = exporting.QualifiedNamesFragment {}

            fragment = contentAssist.JavaBasedContentAssistFragment {}
            fragment = parser.antlr.XtextAntlrUiGeneratorFragment {}

//            fragment = builder.BuilderIntegrationFragment {}
//            fragment = formatting.FormatterFragment {}
//            fragment = labeling.LabelProviderFragment {}
//            fragment = outline.OutlineTreeProviderFragment {}
//            fragment = outline.QuickOutlineFragment {}
//            fragment = quickfix.QuickfixProviderFragment {}

        }
    }
}
