module nl.dslmeinte.xtext.express.GenerateExpress

import org.eclipse.emf.mwe.utils.*
import org.eclipse.xtext.generator.*
import org.eclipse.xtext.ui.generator.*

var base.file.extensions = "exp_base"
var expression.file.extensions = "exp_expr"
var express.file.extensions = "exp"

var projectName = "nl.dslmeinte.xtext.express"
var runtimeProject = "../${projectName}"

Workflow {

    bean = StandaloneSetup {
        scanClassPath = true
        platformUri = "${runtimeProject}/.."
    }

    component = DirectoryCleaner {
        directory = "${runtimeProject}/src-gen/nl"
    }

    component = DirectoryCleaner {
        directory = "${runtimeProject}.ui/src-gen"
    }

    component = Generator {
        pathRtProject = runtimeProject
        pathUiProject = "${runtimeProject}.ui"
        pathTestProject = "${runtimeProject}.tests"
        projectNameRt = projectName
        projectNameUi = "${projectName}.ui"

        language = {
            uri = "classpath:/nl/dslmeinte/xtext/express/base/Base.xtext"
            fileExtensions = base.file.extensions

            fragment = grammarAccess.GrammarAccessFragment {}
            fragment = ecore.EcoreGeneratorFragment {}
            fragment = serializer.SerializerFragment {}	// (serializer 2.0)
            fragment = resourceFactory.ResourceFactoryFragment { fileExtensions = base.file.extensions }
            fragment = parser.antlr.ex.rt.AntlrGeneratorFragment {
            	options = { ignoreCase=true }
            }
            fragment = validation.JavaValidatorFragment {}
            fragment = contentAssist.JavaBasedContentAssistFragment {}
            fragment = parser.antlr.ex.ca.ContentAssistParserGeneratorFragment {}
        }

        language = {
            uri = "classpath:/nl/dslmeinte/xtext/express/expression/Expression.xtext"
            fileExtensions = expression.file.extensions

            fragment = grammarAccess.GrammarAccessFragment {}
            fragment = ecore.EcoreGeneratorFragment {}
            fragment = serializer.SerializerFragment {}
            fragment = resourceFactory.ResourceFactoryFragment { fileExtensions = expression.file.extensions }
            fragment = parser.antlr.ex.rt.AntlrGeneratorFragment {
            	options = { ignoreCase=true }
            }
            fragment = validation.JavaValidatorFragment {
                composedCheck = "org.eclipse.xtext.validation.ImportUriValidator"
                composedCheck = "org.eclipse.xtext.validation.NamesAreUniqueValidator"
            }
            fragment = scoping.ImportURIScopingFragment {}
            fragment = exporting.SimpleNamesFragment {}
            fragment = builder.BuilderIntegrationFragment {}
            fragment = formatting.FormatterFragment {}
            fragment = labeling.LabelProviderFragment {}
            fragment = outline.OutlineTreeProviderFragment {}
            fragment = outline.QuickOutlineFragment {}
            fragment = quickfix.QuickfixProviderFragment {}
            fragment = contentAssist.JavaBasedContentAssistFragment {}
            fragment = parser.antlr.ex.ca.ContentAssistParserGeneratorFragment {
            	options={
            		ignoreCase=true
            	}
            }
            fragment = junit.Junit4Fragment {}
            fragment = types.TypesGeneratorFragment {}
            fragment = xbase.XbaseGeneratorFragment {}
            fragment = templates.CodetemplatesGeneratorFragment {}
            fragment = refactoring.RefactorElementNameFragment {}
            fragment = compare.CompareFragment {
                 fileExtensions = expression.file.extensions
            }

        }

        language = {
            uri = "classpath:/nl/dslmeinte/xtext/express/Express.xtext"
            fileExtensions = express.file.extensions

            fragment = grammarAccess.GrammarAccessFragment {}
            fragment = ecore.EcoreGeneratorFragment {}

            // serializer 2.0
            fragment = serializer.SerializerFragment {}
            // the serialization component (1.0)
            // fragment = parseTreeConstructor.ParseTreeConstructorFragment {}

            fragment = resourceFactory.ResourceFactoryFragment { fileExtensions = express.file.extensions }

            fragment = parser.antlr.ex.rt.AntlrGeneratorFragment {
            	options = { ignoreCase=true }
            }

            fragment = validation.JavaValidatorFragment {
                composedCheck = "org.eclipse.xtext.validation.ImportUriValidator"
                composedCheck = "org.eclipse.xtext.validation.NamesAreUniqueValidator"
            }

            fragment = scoping.ImportURIScopingFragment {}
            fragment = exporting.SimpleNamesFragment {}

            fragment = builder.BuilderIntegrationFragment {}
            fragment = generator.GeneratorFragment {
                generateMwe = true
                generateJavaMain = true
            }
            fragment = formatting.FormatterFragment {}
            fragment = labeling.LabelProviderFragment {}
            fragment = outline.OutlineTreeProviderFragment {}
            fragment = outline.QuickOutlineFragment {}
            fragment = quickfix.QuickfixProviderFragment {}
            fragment = contentAssist.JavaBasedContentAssistFragment {}
            fragment = parser.antlr.ex.ca.ContentAssistParserGeneratorFragment {
            	options={
            		ignoreCase=true
            	}
            }

            // generates junit test support classes into Generator#pathTestProject
            fragment = junit.Junit4Fragment {}

            // provides the necessary bindings for java types integration
            fragment = types.TypesGeneratorFragment {}

            // generates the required bindings only if the grammar inherits from Xbase
            fragment = xbase.XbaseGeneratorFragment {}

            // provides a preference page for template proposals
            fragment = templates.CodetemplatesGeneratorFragment {}

            // rename refactoring
            fragment = refactoring.RefactorElementNameFragment {}

            // provides a compare view
            fragment = compare.CompareFragment {
                 fileExtensions = express.file.extensions
            }

        }

    }

}
