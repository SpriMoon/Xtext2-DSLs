grammar nl.dslmeinte.xtext.express.expression.Expression with nl.dslmeinte.xtext.express.base.Base

generate expression "http://www.dslmeinte.nl/xtext/express/expression/Expression"

ExpressionTestModel:
	(expressions+=Expression ';')+;


/*
 * +-------------------+
 * | ยง12 - expressions |
 * +-------------------+
 */

Expression returns Expression:
	RelationalExpression
	;

RelationalExpression returns Expression:
	AdditiveExpression
		({RelationalExpression.left=current} operator=RelationalOperator right=AdditiveExpression)*
	;

enum RelationalOperator:
	  smallerThan='<' | greaterThan='>' | smallerThanOrEqual='<=' | greaterThanOrEqual='>='
	| notEquals='<>' | equals='=' | instanceEquals=':=:' | instanceNotEquals=':<>:'
	| in | like
	;

AdditiveExpression returns Expression:
	MultiplicativeExpression
		({AdditiveExpression.left=current} operator=AdditiveOperator right=MultiplicativeExpression)*
	;

enum AdditiveOperator:
	minus='-' | plus='+' | or | xor
	;

MultiplicativeExpression returns Expression:
	ExponentiationExpression
		({MultiplicativeExpression.left=current} operator=MultiplicativeOperator right=ExponentiationExpression)*
	;

enum MultiplicativeOperator:
	mult='*' | div='/' | integerDiv='div' | integerMod='mod' | and | complexEntityConstruction='||'
	;

ExponentiationExpression returns Expression:
	UnaryExpression
		({ExponentiationExpression.left=current} '**' right=ExponentiationExpression)?	// right-associativity
	;

UnaryExpression returns Expression:
	  ComponentReferenceExpression
	| {UnaryExpression} operator=UnaryOperator operand=UnaryExpression
	;

enum UnaryOperator:
	not | plus='+' | minus='-'
	;

ComponentReferenceExpression returns Expression:
	  PrimaryExpression
	  (
	  	  ( {IndexingExpression.left=current} '[' from=INT (':' to=INT)? ']' )
	  	| ( {DotExpression.left=current} '.' right=PrimaryExpression)*
	  	| ( {GroupReferenceExpression.left=current} '\\' right=PrimaryExpression)
	  )
	;

PrimaryExpression returns Expression:
	  '(' Expression ')'
	| Literal
	| {BuiltinConstant} constant=BuiltinConstants
	| {GenericReference} ref=ID
	;

Literal:
	  {BinaryLiteral} value=BINARY
	| {IntegerLiteral} value=INT
	| {StringLiteral} value=STRING
	| {LogicalLiteral} value=LogicalLiteralSyntax
	| {RealLiteral} value=REAL
	;


// ยง7.2.3 - built-in constants

enum BuiltinConstants:
	  questionMark='?'
	| self='self'
	| const_e
	| pi
	;

